import logging
import os, time, datetime
import keyboards.main_navigation as nav
from aiogram.types.message import ContentType
from app.create_bot import dp, bot
from aiogram import executor, types
from db import db

logging.basicConfig(level=logging.INFO)

PATH_TO_DB_FILE = os.path.join("", "db/code_writer.db")
my_orm = db.Database(PATH_TO_DB_FILE)
LiqPay_TOKEN = '632593626:TEST:sandbox_i15590008377'


def days_to_seconds(days):
    return days * 24 * 60 * 60


def time_sub_last_days(get_time_db):
    """
    Count time for end of the subscription
    :param get_time_db: secs from time() + 30 days taken from db
    :return:
        - if last_time > 0 will return last time in secof user subcription
        - else, user's sub is end
    """
    time_now = int(time.time())
    last_time = int(get_time_db) - time_now

    if last_time <= 0:
        return False
    else:
        # –ø–æ—Å–∏—Ç–≤–∞–µ–º —Å–µ–∫—ã –≤ –¥–Ω–∏ –∏–ª–∏ –º–µ—Å—è—Ü—ã —Å –ø–æ–º–æ—â—å—é datetime(–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞—à–∏ —Å–µ–∫–∏ –≤ –¥–Ω–∏, —á–∞—Å—ã –∏–ª–∏ –∂–µ –º–µ—Å—è—Ü—ã)
        dt = str(datetime.timedelta(seconds=last_time))
        return dt


@dp.message_handler(commands=['start'])
async def start_and_register(message: types.Message):
    """
    if our user is not yet registered (not found in his database), then register him..
    else it was found in the database - we send him SMS warning that he is already registered
    """
    if not my_orm.user_exist(message.from_user.id):  # —ç—Ç–æ –∞–π–¥–∏—à–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥–µ
        my_orm.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, "Set your nickname")
    else:
        await bot.send_message(message.from_user.id, "You is already registered", reply_markup=nav.main_menu)


@dp.message_handler()
async def bot_msg(message: types.Message):
    """
    iogram can check type of chat and work only with private chat
    –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –µ—Å—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö(–±—É–¥–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∏–∫)
    # –ø—Ä–æ–π–¥—è –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ –µ–≥–æ —Å—Ç–∞—Ç—É—Å —É–∂–µ —É–∫
    :param message: msg from user for set nickname
    :return:
    """
    if message.chat.type == 'private':
        if message.text == 'üë§PROFILE':
            """
            –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç,
            —Ç.–µ. –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—å, –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç 'üë§PROFILE'
            """
            nickname = my_orm.get_nickname(message.from_user.id)

            user_sub = time_sub_last_days(my_orm.get_time_subscription(message.from_user.id))
            if user_sub == False:
                user_sub = "You don't have any subscription yet"
            else:
                user_sub = "\nSubscription: " + user_sub
            await bot.send_message(message.from_user.id, "Your nickname is " + nickname + user_sub)

        elif message.text == '‚ù§Ô∏èSUBSCRIPTION':
            await bot.send_message(message.from_user.id, "You can get something with the month subscription",
                                   reply_markup=nav.sub_inline_markup)

        elif message.text == '‚úÖÔ∏èSUBSCRIDED FUNC':
            if my_orm.get_time_subscription_bool(message.from_user.id):
                """—Ç.–µ. –µ—Å–ª–∏ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ - –º—ã —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ–º"""
                await bot.send_message(message.from_user.id, "You got the access!")
            else:
                await bot.send_message(message.from_user.id, "Buy month subscription")


        else:
            if my_orm.get_sign_up_stage(message.from_user.id) == 'setnickname':
                # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –¥–æ–ª–∂–µ–Ω —É–∫–∑–∞—Ç—å –Ω–∏–∫,
                # —Ç–æ –º—ã —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∏–∫ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
                if len(message.text) > 15:
                    await bot.send_message(message.from_user.id, "Nickname should not be more than 15 letters")
                elif '@' in message.text or '/' in message.text:  # –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    await bot.send_message(message.from_user.id, "You input wrong symbols")
                else:
                    # –ø–æ–ø–¥–∞—è –≤ –¥–∞–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏.. –Ω–∞–∑–Ω–∞–µ–º –µ–≥–æ –Ω–æ–≤—ã–π –Ω–∏–∫
                    my_orm.set_nickname(message.from_user.id, message.text)
                    my_orm.set_sign_up_stage(message.from_user.id, "done")
                    await bot.send_message(message.from_user.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ",
                                           reply_markup=nav.main_menu)
            else:
                # –∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑—Ö  –æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª "—ç—Ç–∞–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" –∏ –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ –≤ –¥–∏–∞–ª–æ–≥
                await bot.send_message(message.from_user.id, "wtf?")


@dp.callback_query_handler(text='submonth')
async def submonth(callback: types.CallbackQuery):
    """callback form user for delete his msg and show to user our product"""
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="Subscription",
        description="My description of product",
        payload="month_sub",
        provider_token=LiqPay_TOKEN,
        currency="UAH",
        start_parameter="test_bot",
        prices=[
            {
                "label": "–≥—Ä–Ω",
                "amount": 5000
            }
        ]
    )
    # payload - —É—Å–ª–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–æ–¥—Ö–≤–∞—Ç–∏—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ
    # start_parameter - –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Å—á–µ—Ç –î–õ–Ø –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ –µ—Å–ª–∏
    # –≤ –Ω–µ–º —á—Ç–æ-—Ç–æ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ –≥–µ–Ω–µ—Ä–∏—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –ö–ê–ñ–î–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # "amount" - –≥—Ä–Ω 50, –∞ —É–∫–∞–∑—ã–≤–∞–µ–º 5000 - –ø–æ—Ç–æ–º—É —á—Ç–æ —Å—á–∏—Ç–∞—é—Ç—Å—è –µ—â–µ –∫–æ–ø–µ–π–∫–∏(–±–µ–∑ –∑–∞–ø—è—Ç–æ–π)


@dp.pre_checkout_query_handler()
async def process_pre_check_out_query(pre_check_out_query: types.PreCheckoutQuery):
    """Submit existing of our product"""
    await bot.answer_pre_checkout_query(pre_check_out_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    """
    decorator process all payments using payload
    """
    if message.successful_payment.invoice_payload == "month_sub":
        time_sub = int(time.time()) + days_to_seconds(
            30)  # time() —Å–µ–∫—É–Ω–¥—ã –ø—Ä–æ—à–µ–¥—à–∏–µ —Å 1980 –ø–æ –Ω–∞—à–µ –≤—Ä–µ–º—è + –ø—Ä–∏–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π –≤ —Å–µ–∫ - —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å—á–∏—Ç–∞–µ–º —å–∫–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏
        my_orm.set_time_subscription(message.from_user.id, time_sub)
        await bot.send_message(message.from_user.id, "You was successfully subscribed per month")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
