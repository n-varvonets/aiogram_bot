import logging

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils import markdown
from aiogram.dispatcher.filters.state import State, StatesGroup

import db
import exceptions
import expenses
from categories import Categories
from middlewares import AccessMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)

API_TOKEN = "5429933851:AAHhEy1kyBhZDCLIAdXMAPW3lS7gTZopKSo"
# API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")

ACCESS_ID = 40243175
# ACCESS_ID = os.getenv("TELEGRAM_ACCESS_ID")

# PROXY_URL = os.getenv("TELEGRAM_PROXY_URL")
# PROXY_AUTH = aiohttp.BasicAuth(
#     login=os.getenv("TELEGRAM_PROXY_LOGIN"),
#     password=os.getenv("TELEGRAM_PROXY_PASSWORD")
# )

storage = MemoryStorage()  # –¥–ª—è FSM state

# bot = Bot(token=API_TOKEN, proxy=PROXY_URL, proxy_auth=PROXY_AUTH)
bot = Bot(token=API_TOKEN)
# dp = Dispatcher(bot)
dp = Dispatcher(bot, storage=storage)


# dp.middleware.setup(AccessMiddleware(ACCESS_ID))


# —Å–æ–∑–¥–∞–¥–∏–º –∫–ª–∞—Å—Å –Ω–∞—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
class FSMBudjet(StatesGroup):
    """
    –í –¥–∞–Ω–Ω–æ–º –∫–ª–∞—Å—Å–µ –±—É–¥–µ—Ç 4 —Å–æ—Å—Ç–æ—è–Ω–∏—è... —Ç.–µ. 4 –ø—É–Ω–∫—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—å—ñ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    """
    total_income = State()
    month_planing_base_expenses = State()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    # await message.answer(
    #     "–ú–æ—è —Ü—ñ–ª—å - –¥–æ–ø–æ–º–æ—Ç–∏ –í–∞–º –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ —Å–≤–æ—ó—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ ü§ì –ó–±–µ—Ä–µ–∂—É –≤—Å—ñ –í–∞—à—ñ –≤–∏—Ç—Ä–∞—Ç–∏, —è–∫—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–¥—ñ–ª—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º —ñ –ø—Ä–æ–≤–µ–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –±–∞–∑–æ–≤—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É üßê.")

    await message.answer(
        f"–ë–∞–∂–∞—é –∑–¥–æ—Ä–æ–≤'—è, {message.from_user.first_name}! üôÇ \n\n"

        "–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ—á–∞—Ç–∏ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ —Å–≤–æ—ó—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ - –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É\n"
        "—á–∞—Ç—ñ –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏ –≤–∞—à–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏,\n\n ‚û°Ô∏è –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100 –∫–∞–≤–∞")

    await message.answer(
        "–£ –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å —Ç–∞–∫–∏–º–∏ —à–≤–∏–¥–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n\n"
        
        "/expenses - –æ—Å—Ç–∞–Ω–Ω—ñ –º–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏\n"
        "/set_budget - –∑–∞–¥–∞—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç\n"
        "/today - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å\n"
        "/categories - –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ñ –≤–∏—Ç—Ä–∞—Ç\n"
        "/help - –¥–æ–¥–∞—Ç–∫–æ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ–Ω–µ —Ç–∞ –º–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"

    )


@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
     –∏ –¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    await message.answer(
        "–í–∏—Ç—Ä–∞—Ç–∏ –º–æ–∂–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º /categories\n\n"
        "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç –≤ —Å–≤–æ—é —á–µ—Ä–≥—É –±—É–≤–∞—é—Ç—å 2Ô∏è‚É£—Ö —Ç–∏–ø—ñ–≤:\n\n"
        "    üîπ –ë–∞–∑–æ–≤—ñ: —Ç—ñ –≤–∏—Ç—Ä–∞—Ç–∏, —è–∫—ñ –º–∏ —â–æ–¥–µ–Ω–Ω–æ —Ä–æ–±–∏–º–æ —Ç–∞ —â–æ–º—ñ—Å—è–Ω–æ –≤–∏–ø–ª–∞—á—É—î–º–æ(—Ç–∞–∫—Å—ñ, –ø—Ä–æ–¥—É–∫—Ç–∏, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Å–ø–æ—Ä—Ç–∑–∞–ª..)\n\n"
        "    üîπ –ù–µ –±–∞–∑–æ–≤—ñ: –Ω–µ –Ω–µ–±—Ö–æ–¥–Ω—ñ  –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –Ω–∞—à–æ–º—É –∂–∏—Ç—Ç—ñ —Ç–∞ —è–∫—ñ –º–∞—î–º–æ."
        " –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ —É —Ä–∞–º–∫–∞ –æ–±—É–º–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É (–ø—ñ–¥–ø—ñ—Å–∫–∞, –∫–∞–≤–∞, –ø—ñ—Ü—Ü–∞, –¥–∞–≤ —É –±–æ—Ä–≥, –¥–æ–Ω–∞—Ç, book, –∫—ñ–Ω–æ —ñ —Ç.–¥.)"
    )
    await message.answer(
        "–©–æ–± —è –∑–º—ñ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –π –º—ñ—Å—è—á–Ω–∏—Ö –≤–∏—Ç—Ä–∞—Ç üìà –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –í–∞—à –±—é–¥–∂–µ—Ç:\n\n"
        "/set_budget - –∑–∞–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –±—é–¥–∂–µ—Ç\n\n"
        "–ë—é–¥–∂–µ—Ç –º–∞—î –¥–≤—ñ –∫–ª—é—á–µ–≤—ñ —Ö–∞—Ä–∞—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        "    - –∑–∞–≥–∞–ª—å–Ω—ñ–π –í–∞—à –º—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥ –≤ –≥—Ä–Ω;\n"
        "    - –º—ñ—Å—è—á–Ω—ñ –±–∞–∑–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏: —Ç–∞ —Å—É–º–º–∞, —è–∫—É –º–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ä–∞–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è –Ω–∞ –±–∞–∑–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏.\n\n"
        "‚ö†Ô∏è –º—ñ—Å—è—á–Ω—ñ –±–∞–∑–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏ - —Ü–µ —á–∞—Å—Ç–∏–Ω–∞ –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º—ñ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö—ñ–¥—É —Ç–∞ –Ω–µ –º–æ–∂–µ –π–æ–≥–æ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏."
    )


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_expense(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    row_id = int(message.text[4:])
    expenses.delete_expense(row_id)
    answer_message = "–í–∏–¥–∞–ª–∏–≤"
    await message.answer(answer_message)


@dp.message_handler(commands=['categories'])
async def categories_list(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:\n\n " + \
                     (f"\n ".join(
                         [f"{idx_cat + 1}.) " + category.name.capitalize() + ': ' + ", ".join(category.aliases) + ';'
                          for
                          idx_cat, category in enumerate(categories)]))
    await message.answer(answer_message)


@dp.message_handler(commands=['today'])
async def today_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç"""
    answer_message = expenses.get_today_statistics()
    await message.answer(answer_message)


@dp.message_handler(commands=['set_budget'], state=None)
async def set_state_total_income(message: types.Message):
    await FSMBudjet.total_income.set()
    await message.answer('–í–∫–∞–∂—ñ—Ç—å –í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å, –≥—Ä–Ω,\n\n'
                         '‚û°Ô∏è  –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10000')


# @dp.message_handler(state="*", commands='–≤—ñ–¥–º—ñ–Ω–∞')
# @dp.message_handler(Text(equals='–≤—ñ–¥–º—ñ–Ω–∞', ignore_case=True), state="*")
# async def cancel_handler_state(message: types.Message, state: FSMContext):
#     """
#     –í—ñ–¥–º—ñ–Ω–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –±—é–¥–∂–µ—Ç—É
#     """
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#     await state.finish()
#     await message.reply('OK')


@dp.message_handler(state=FSMBudjet.total_income)
async def set_state_month_planing_base_expenses(message: types.Message, state: FSMContext):
    """–ª–æ–≤–∏–º –ø–µ—Ä–≤—å—ñ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(photo) –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å(–ø–∞–º—è—Ç—å) –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å—É FSMAdmin"""
    async with state.proxy() as data:
        try:
            val_total_income = int(message.text)
            data['total_income'] = val_total_income
            await FSMBudjet.next()
            await message.answer('–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—è—á–Ω—É —Å—É–º–º—É –≤–∞—à–∏—Ö –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç, –≥—Ä–Ω.\n\n'
                                 '/help - –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ –±–∞–∑–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏')

        except:
            await message.answer('–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ')


@dp.message_handler(state=FSMBudjet.month_planing_base_expenses)
async def set_state_month_planing_base_expenses(message: types.Message, state: FSMContext):
    """–ª–æ–≤–∏–º –ø–µ—Ä–≤—å—ñ–π –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(photo) –∏ –ø–∏—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å(–ø–∞–º—è—Ç—å) –º–∞—à–∏–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–ª–∞—Å—Å—É FSMAdmin"""
    check_type_and_comparison = False

    async with state.proxy() as data:
        try:
            # check for type of recieved msg
            val_month_planing_base_expenses = int(message.text)
            data['month_planing_base_expenses'] = val_month_planing_base_expenses

            if tuple(data.values())[0] > tuple(data.values())[1]:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —É–∫–∞–∑–∞–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω–æ... –∞ –∏–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ª–∏ –æ–Ω –º–µ—Å—è—á–Ω—å—ñ—Ö –¥–æ—Ö–æ–¥ –±–æ–ª—å—à–µ —á–∏—Å–ª–∞ –±–∞–∑–æ–≤—å—ñ—Ö —Ä–∞—Å—Ç—Ä–∞—Ç
                # –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Ç–æ –∑–∞–ø–∏—Å—É–µ–º –µ–≥–æ –≤ –±–¥ –æ—Ç–º–µ—Ç–∏–≤ —Ñ–ª–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç—Ä—É
                check_type_and_comparison = True
            else:
                # –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —É–≤–µ–¥–æ–≤–º–ª—è–µ–º –µ–º—É –æ–± —î—Ç–æ–º –∏ –∫–∏–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –±—é–¥–∂–µ—Ç–∞
                await message.answer(
                                     '‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º,\n'
                                     ' –Ω—ñ–∂ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –º—ñ—Å—è—á–Ω–∞ —Å—É–º–º—É –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç\n\n'
                                     '/set_budget - –ø–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É')
                await state.finish()

        except:
            await message.answer('–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ')



    if check_type_and_comparison:

        await db.set_budget(state)
        await message.answer('–í–∞—à –º—ñ—Å—è–Ω–∏–π –±—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω–æ:\n'
                             f'    - –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å: {data["total_income"]} –≥—Ä–Ω\n'
                             f'    - –º—ñ—Å—è—á–Ω–∞ —Å—É–º–º—É –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç: {data["month_planing_base_expenses"]} –≥—Ä–Ω')
        await state.finish()


@dp.message_handler(commands=['month'])
async def month_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    try:
        answer_message = expenses.get_month_statistics()
        await message.answer(answer_message)
    except:
        await message.answer("")


@dp.message_handler(commands=['expenses'])
async def list_expenses(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    last_expenses = expenses.last()
    if not last_expenses:
        await message.answer("–©–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏")

    last_expenses_rows = [
        f"{expense.amount} –≥—Ä–Ω. –Ω–∞ {expense.category_name} ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ "
        f"/del{expense.id} —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É"
        for expense in last_expenses]
    answer_message = "–û—Å—Ç–∞–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:\n\n* " + "\n\n* " \
        .join(last_expenses_rows)
    await message.answer(answer_message)


@dp.message_handler()
async def add_expense(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥"""
    try:
        expense = expenses.add_expense(message.text)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"–î–æ–¥–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ {expense.amount} –≥—Ä–Ω –Ω–∞ {expense.category_name}.\n\n"
        f"{expenses.get_today_statistics()}")
    await message.answer(answer_message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
