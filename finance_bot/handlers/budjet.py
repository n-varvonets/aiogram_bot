from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram import types
from aiogram.dispatcher import Dispatcher
from db import db
from inlines import budjet_btns, client_btns


class FSMBudjet(StatesGroup):
    """
    The class will have 2 states
    """
    total_income = State()
    month_planing_base_expenses = State()


async def set_state_total_income(message: types.Message):
    """Start filling the budget form via StateGroup"""
    await FSMBudjet.total_income.set()
    await message.answer('–í–∫–∞–∂—ñ—Ç—å –í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å, –≥—Ä–Ω,\n\n'
                         '‚û°Ô∏è  –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15000 —á–∏ 15_000', reply_markup=budjet_btns.cancel_btn)


async def cancel_handler_state(message: types.Message, state: FSMContext):
    """
    Cancellation of filling out the budget form
    """
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('–æ–∫, —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ!', reply_markup=client_btns.back_to_main_btn)


async def set_state_month_total_income(message: types.Message, state: FSMContext):
    """
    –°atch the first answer total_income from the user into
    the dictionary (memory) of the machine state by class FFSMAdmin
    """
    async with state.proxy() as data:
        try:
            val_total_income = int(message.text)
            data['total_income'] = val_total_income
            await FSMBudjet.next()
            await message.answer('–¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—è—á–Ω—É —Å—É–º–º—É –≤–∞—à–∏—Ö –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç, –≥—Ä–Ω.\n\n'
                                 '‚û°Ô∏è  –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 7500 —á–∏ 7_500', reply_markup=budjet_btns.cancel_btn)

        except:
            await message.answer('–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ',
                                 reply_markup=client_btns.back_to_main_btn)


async def set_state_month_planing_base_expenses(message: types.Message, state: FSMContext):
    """
    Catch the second answer month_planing_base_expenses from the user by class FSMAdmin
        - check for type of recieved msg;
        - check the value if the client has set monthly income more than basic expenses...
            - if everything is good, then we write it down in the database.
            - otherwise need to inform him about this and ask him to fill out the budget form again
    """

    check_type_and_comparison = False

    async with state.proxy() as data:
        try:
            #
            val_month_planing_base_expenses = int(message.text)
            data['month_planing_base_expenses'] = val_month_planing_base_expenses

            if tuple(data.values())[0] > tuple(data.values())[1]:
                check_type_and_comparison = True
            else:
                await message.answer(
                    '‚ö†Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–∏–º,\n'
                    ' –Ω—ñ–∂ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –º—ñ—Å—è—á–Ω–∞ —Å—É–º–º—É –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç\n\n'
                    '/set_budget - –ø–µ—Ä–µ–∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ–æ—Ä–º—É\n'
                    '/help - –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –±—ã–ª—å—à–µ –ø—Ä–æ –±–∞–∑–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏', reply_markup=client_btns.back_to_main_btn)
                await state.finish()

        except:
            await message.answer('–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —É —á–∏—Å–ª–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ',
                                 reply_markup=client_btns.back_to_main_btn)

    if check_type_and_comparison:
        await db.set_budget(state)
        await message.answer('‚úÖ –í–∞—à –º—ñ—Å—è–Ω–∏–π –±—é–¥–∂–µ—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω–æ:\n\n'
                             f'    - –∑–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –º—ñ—Å—è—Ü—å: {data["total_income"]} –≥—Ä–Ω\n'
                             f'    - –º—ñ—Å—è—á–Ω–∞ —Å—É–º–º—É –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç: {data["month_planing_base_expenses"]} –≥—Ä–Ω\n\n'
                             f'üîê –ù–∞–¥–∞–Ω–æ –¥–æ—Å—Ç—É–ø –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìà –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç:\n\n'
                             f' /today - –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n'
                             f' /month - –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å', reply_markup=client_btns.static_and_back_main_menu)
        await state.finish()


async def cancel_handler_state_inline_btn(callback: types.CallbackQuery, state: FSMContext):
    """
    Cancellation of filling out the budget form
    """
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await callback.message.answer('–æ–∫, —Ñ–æ—Ä–º–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –±–¥–∂–µ—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–∞!', reply_markup=client_btns.back_to_main_btn)
    await callback.answer('–æ–∫, —Ñ–æ—Ä–º–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞!', show_alert=True)


def register_handlres_budjet(dp: Dispatcher):
    """register our funcs to handlers of set budjet story"""
    dp.register_message_handler(set_state_total_income, commands=['set_budget'], state=None)

    dp.register_callback_query_handler(cancel_handler_state_inline_btn, state="*")
    dp.register_message_handler(cancel_handler_state, state="*", commands='—Å–∫–∞—Å—É–≤–∞—Ç–∏')
    # dp.register_message_handler(cancel_handler_state, Text(equals=['—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–æ—Ç–º–µ–Ω–∞'], ignore_case=True), state="*")

    dp.register_message_handler(set_state_month_total_income, state=FSMBudjet.total_income)
    dp.register_message_handler(set_state_month_planing_base_expenses, state=FSMBudjet.month_planing_base_expenses)
