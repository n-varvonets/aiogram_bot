from aiogram import types
from finance_bot.exceptions import exceptions
from finance_bot.app import expenses
from finance_bot.app.categories import Categories
from aiogram.dispatcher import Dispatcher


async def send_welcome(message: types.Message):
    """Sends a welcome message"""

    await message.answer(
        f"–ë–∞–∂–∞—é –∑–¥–æ—Ä–æ–≤'—è, {message.from_user.first_name}! üôÇ \n\n"

        "–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ—á–∞—Ç–∏ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ —Å–≤–æ—ó—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ - –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É\n"
        "—á–∞—Ç—ñ –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏ –≤–∞—à–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏,\n\n ‚û°Ô∏è –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100 –∫–∞–≤–∞")

    await message.answer(
        "–£ –≤–∞—Å —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å —Ç–∞–∫–∏–º–∏ —à–≤–∏–¥–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n\n"

        "/expenses - –æ—Å—Ç–∞–Ω–Ω—ñ –º–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏\n"
        "/set_budget - –∑–∞–¥–∞—Ç–∏ –º—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç\n"
        "/today - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/month - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å\n"
        "/categories - –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ñ –≤–∏—Ç—Ä–∞—Ç\n"
        "/help - –¥–æ–¥–∞—Ç–∫–æ–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ–Ω–µ —Ç–∞ –º–æ—ó –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ"

    )


async def help_cmd(message: types.Message):
    """Sends help msg"""
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
     –∏ –¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    await message.answer(
        "–©–æ–± —è –∑–º—ñ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –≤–∞—à–∏—Ö –≤–∏—Ç—Ä–∞—Ç —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –º—ñ—Å—è—á–Ω–∏—Ö üìà - –º–µ–Ω—ñ –¥–ª—è —Ä–æ—Ä–∞—Ö—É–Ω–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ  –í–∞—à –±—é–¥–∂–µ—Ç:\n\n"
        "/set_budget - –∑–∞–¥–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –±—é–¥–∂–µ—Ç\n\n"
        "ü§ì –ú—ñ—Å—è—á–Ω–∏–π –±—é–¥–∂–µ—Ç –º–∞—î –¥–≤—ñ –∫–ª—é—á–µ–≤—ñ —Ö–∞—Ä–∞—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
        "    - –∑–∞–≥–∞–ª—å–Ω—ñ–π –º—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥, –≥—Ä–Ω;\n"
        "    - –º—ñ—Å—è—á–Ω—ñ –±–∞–∑–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏: - —Ü–µ —á–∞—Å—Ç–∏–Ω–∞ –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º—ñ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö—ñ–¥—É,"
        " —è–∫—É –º–∏ –ø—Ä–∏–±–ª–∏–∑–Ω–æ –ø–ª–∞–Ω—É–µ–º–æ –≤–∏—Ç—Ä–∞—Ç–∏—Ç–∏ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è –Ω–∞ –∑–∞–¥–æ–ª–µ–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –ø–æ—Ç—Ä–µ–±"
    )
    await message.answer(
        "üëâ –í–∏—Ç—Ä–∞—Ç–∏ –º–æ–∂–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º:\n"
        "/categories - –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –≤–∏—Ç—Ä–∞—Ç\n\n"
        "üëâ –ü–æ –ø–æ—Ç—Ä–µ–±–∞–º —É—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç - –±—É–≤–∞—é—Ç—å 2Ô∏è‚É£—Ö —Ç–∏–ø—ñ–≤:\n"
        "    üîπ –ë–∞–∑–æ–≤—ñ: —Ç—ñ –≤–∏—Ç—Ä–∞—Ç–∏, —è–∫—ñ –º–∏ —â–æ–¥–µ–Ω–Ω–æ —Ä–æ–±–∏–º–æ —Ç–∞ —â–æ–º—ñ—Å—è–Ω–æ –≤–∏–ø–ª–∞—á—É—î–º–æ(–ø—Ä–æ–¥—É–∫—Ç–∏, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Ç–∞ –≤–∏–ø–ª–∞—Ç–∏ –∑–∞ –∫—Ä–∞–≤—Ç–∏—Ä—É, —ñ—Ç–µ—Ä–Ω–µ—Ç, —Ç–æ—â–æ)\n"
        "    üîπ –ù–µ –±–∞–∑–æ–≤—ñ: –Ω–µ –Ω–µ–±—Ö–æ–¥–Ω—ñ  –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –Ω–∞—à–æ–º—É –∂–∏—Ç—Ç—ñ —Ç–∞ —è–∫—ñ, –ø–æ –∑–∞–¥—É–º—Ü—ñ –∞–≤—Ç–æ—Ä–∞, –≤–∞—Ä—Ç–æ"
        " –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ —É —Ä–∞–º–∫–∞ –æ–±—É–º–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É (–∫–∞–≤–∞, –ø—ñ–¥–ø–∏—Å–∫–∏, –ø–∞–± —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ)"
    )


async def del_expense(message: types.Message):
    """Deletes one expense record by its ID"""
    row_id = int(message.text[4:])
    expenses.delete_expense(row_id)
    answer_message = "–í–∏–¥–∞–ª–∏–≤"
    await message.answer(answer_message)


async def categories_list(message: types.Message):
    """Sends a list of expense categories"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:\n\n " + \
                     (f"\n ".join(
                         [f"{idx_cat + 1}.) " + category.name.capitalize() + ': ' + ", ".join(category.aliases) + ';'
                          for
                          idx_cat, category in enumerate(categories)])
                      + "\n\n‚ö†Ô∏è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 3 –∫–∞—Ç–µ–≥—Ä—ñ—ó –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –¥–æ –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç")
    await message.answer(answer_message)


async def today_statistics(message: types.Message):
    """Sends today's spending statistics"""
    answer_message = expenses.get_today_statistics()
    await message.answer(answer_message)


async def month_statistics(message: types.Message):
    """Sends spending statistics of the current month"""
    try:
        answer_message = expenses.get_month_statistics()
        await message.answer(answer_message)
    except:
        await message.answer("")


async def list_expenses(message: types.Message):
    """Sends the last few expense records"""
    last_expenses = expenses._get_last_five_expenses()
    if not last_expenses:
        await message.answer("–©–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏")
        return

    last_expenses_rows = [
        f"{expense[0].id}. –≤–∏—Ç—Ä–∞—Ç–∞ '{' '.join(expense[1].split()[1:])}' —É —Ä–∞–∑–º—ñ—Ä—ñ {expense[0].amount} –≥—Ä–Ω –∑–∞–Ω–µ—Å–µ–Ω–∞ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó—ó '{expense[0].category_name}' - –Ω–∞—Ç–∏—Å–Ω–∏ /del{expense[0].id} —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–∞–Ω–∏–π –∑–∞–ø–∏—Å"

        for expense in last_expenses][::-1]

    answer_message = "–û—Å—Ç–∞–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:\n\n " + "\n\n ".join(last_expenses_rows)

    await message.answer(answer_message)


async def add_expense(message: types.Message):
    """Adds a new expense"""
    try:
        expense = expenses.add_expense(message.text)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"–í–∏—Ç—Ä–∞—Ç–∞ {' '.join(message.text.split()[1:])} —É —Ä–æ–∑–º—ñ—Ä—ñ  {expense.amount}"
        f" –≥—Ä–Ω –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ –¥–æ '{expense.category_name}' –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n\n"
        )
    await message.answer(answer_message)


def register_handlres_clients(dp: Dispatcher):
    """register our funcs to handlers"""
    dp.register_message_handler(send_welcome, commands=['start'])
    dp.register_message_handler(help_cmd, commands=['help'])
    dp.register_message_handler(del_expense, lambda message: message.text.startswith('/del'))
    dp.register_message_handler(categories_list, commands=['categories'])
    dp.register_message_handler(today_statistics, commands=['today'])
    dp.register_message_handler(month_statistics, commands=['month'])
    dp.register_message_handler(list_expenses, commands=['expenses'])
    dp.register_message_handler(add_expense)
