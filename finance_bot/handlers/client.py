from aiogram import types
from exceptions import exceptions
from app import expenses, msg_answers
from app.categories import Categories
from aiogram.dispatcher import Dispatcher
from keyboards import kb_client  # –≤–∞—Ä–∏–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
from inlines import client_btns


async def send_welcome(message: types.Message):
    """Sends a welcome message"""

    await message.answer(
        f"–ë–∞–∂–∞—é –∑–¥–æ—Ä–æ–≤'—è, {message.from_user.first_name}! üôÇ \n\n"

        "–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ—á–∞—Ç–∏ –≤–µ—Å—Ç–∏ –æ–±–ª—ñ–∫ —Å–≤–æ—ó—Ö —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ - –≤ –æ—Å–Ω–æ–≤–Ω–æ–º—É\n"
        "—á–∞—Ç—ñ –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —Ç–∞ –Ω–∞–∑–≤—É –ø–æ—Å–ª—É–≥–∏ –≤–∞—à–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏,\n\n ‚û°Ô∏è –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 100 –∫–∞–≤–∞")

    await message.answer(msg_answers.start_back_menu_2,
                         # reply_markup=kb_client
                         reply_markup=client_btns.welcome_btns
                         )


async def help_cmd(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
     –∏ –¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    await message.answer(msg_answers.help_answer_1)
    await message.answer(msg_answers.help_answer_2, reply_markup=client_btns.back_to_main_btn)


async def del_expense(message: types.Message):
    """Deletes one expense record by its ID"""
    row_id = int(message.text[4:])
    expenses.delete_expense(row_id)
    answer_message = "–í–∏–¥–∞–ª–∏–≤"
    await message.answer(answer_message, reply_markup=client_btns.back_to_main_btn)


async def categories_list(message: types.Message):
    """Sends a list of expense categories"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:\n\n " + \
                     (f"\n ".join(
                         [f"{idx_cat + 1}.) " + category.name.capitalize() + ': ' + ", ".join(category.aliases) + ';'
                          for
                          idx_cat, category in enumerate(categories)])
                      + "\n\n‚ö†Ô∏è —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 4 –∫–∞—Ç–µ–≥—Ä—ñ—ó –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –¥–æ –±–∞–∑–æ–≤–∏—Ö –≤–∏—Ç—Ä–∞—Ç")
    await message.answer(answer_message, reply_markup=client_btns.back_to_main_btn)


async def today_statistics(message: types.Message):
    """Sends today's spending statistics"""
    answer_message = expenses.get_today_statistics()
    await message.answer(answer_message, reply_markup=client_btns.back_to_main_btn)


async def month_statistics(message: types.Message):
    """Sends spending statistics of the current month"""
    try:
        answer_message = expenses.get_month_statistics()
        await message.answer(answer_message, reply_markup=client_btns.back_to_main_btn)
    except:
        await message.answer("")


async def list_expenses(message: types.Message):
    """Sends the last few expense records"""
    last_expenses = expenses._get_last_five_expenses()
    if not last_expenses:
        await message.answer("–©–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –≤–∏—Ç—Ä–∞—Ç–∏")
        await message.answer(msg_answers.start_back_menu_1)
        return

    last_expenses_rows = [
                             f"{expense[0].id} –≤–∏—Ç—Ä–∞—Ç–∞: '{' '.join(expense[1].split()[1:])}' —É —Ä–∞–∑–º—ñ—Ä—ñ {expense[0].amount} –≥—Ä–Ω –∑–∞–Ω–µ—Å–µ–Ω–∞ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó—ó \n" \
                             f"'{expense[0].category_name}' - –Ω–∞—Ç–∏—Å–Ω–∏ /del{expense[0].id} —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏  –∑–∞–ø–∏—Å"

                             for expense in last_expenses][::-1]

    answer_message = "–û—Å—Ç–∞–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏:\n\n " + "\n\n ".join(last_expenses_rows)

    await message.answer(answer_message, reply_markup=client_btns.back_to_main_btn)


async def add_expense(message: types.Message):
    """Adds a new expense"""
    try:
        expense = expenses.add_expense(message.text)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"{expense.amount} –≥—Ä–Ω –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –¥–æ '{expense.category_name}' –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.\n\n"
    )
    await message.answer(answer_message, reply_markup=client_btns.back_to_main_btn)


def register_handlres_clients(dp: Dispatcher):
    """register our funcs to handlers of client logic user story"""
    dp.register_message_handler(send_welcome, commands=['start'])
    dp.register_message_handler(help_cmd, commands=['help'])
    dp.register_message_handler(del_expense, lambda message: message.text.startswith('/del'))
    dp.register_message_handler(categories_list, commands=['categories'])
    dp.register_message_handler(today_statistics, commands=['today'])
    dp.register_message_handler(month_statistics, commands=['month'])
    dp.register_message_handler(list_expenses, commands=['expenses'])
    dp.register_message_handler(add_expense)
